#!/usr/bin/env ruby
$: << File.expand_path("#{File.dirname __FILE__}/../lib")
require 'rubygems'
require 'fileutils'
require 'json'
require 'kelbim'
require 'optparse'
require 'rspec'
require 'kelbim/rspec-formatter'

DEFAULT_FILENAME = 'ELBfile'

mode = nil
file = DEFAULT_FILENAME
output_file = '-'
split = false

options = {
  :dry_run     => false,
  :color       => true,
  :debug       => false,
}

ARGV.options do |opt|
  begin
    access_key = nil
    secret_key = nil
    region = nil
    profile_name = nil
    credentials_path = nil

    opt.on('-p', '--profile PROFILE_NAME')    {|v| profile_name                      = v                    }
    opt.on(''  , '--credentials-path PATH')   {|v| credentials_path                  = v                    }
    opt.on('-k', '--access-key ACCESS_KEY')   {|v| access_key                        = v                    }
    opt.on('-s', '--secret-key SECRET_KEY')   {|v| secret_key                        = v                    }
    opt.on('-r', '--region REGION')           {|v| region                            = v                    }
    opt.on('-a', '--apply')                   {    mode                              = :apply               }
    opt.on('-f', '--file FILE')               {|v| file                              = v                    }
    opt.on('-n', '--elb-name REGEXP')         {|v| options[:elb_name]                =  Regexp.new(v)       }
    opt.on('',   '--exclude-elb-name REGEXP') {|v| options[:exclude_elb_name]        =  Regexp.new(v)       }
    opt.on('',   '--dry-run')                 {    options[:dry_run]                 = true                 }
    opt.on('',   '--ec2s VPC_IDS', Array)     {|v| options[:ec2s]                    = v                    }
    opt.on('',   '--without-deleting-policy') {    options[:without_deleting_policy] = true                 }
    opt.on('-e', '--export')                  {    mode                              = :export              }
    opt.on('-o', '--output FILE')             {|v| output_file                       = v                    }
    opt.on('',   '--split')                   {    split                             = true                 }
    opt.on('',   '--split-more')              {    split                             = :more                }
    opt.on('-t', '--test')                    {    mode                              = :test                }
    opt.on('',   '--show-load-balancers')     {    mode                              = :show_load_balancers }
    opt.on('',   '--show-policies')           {    mode                              = :show_policies       }
    opt.on(''  , '--no-color')                {    options[:color]                   = false                }
    opt.on(''  , '--debug')                   {    options[:debug]                   = true                 }
    opt.parse!

    aws_opts = {}
    if access_key and secret_key
      aws_opts[:access_key_id] = access_key
      aws_opts[:secret_access_key] = secret_key
    elsif profile_name or credentials_path
      credentials_opts = {}
      credentials_opts[:profile_name] = profile_name if profile_name
      credentials_opts[:path] = credentials_path if credentials_path
      provider = AWS::Core::CredentialProviders::SharedCredentialFileProvider.new(credentials_opts)
      aws_opts[:credential_provider] = provider
    elsif (access_key and !secret_key) or (!access_key and secret_key) or mode.nil?
      puts opt.help
      exit 1
    end

    aws_opts[:region] = region if region
    AWS.config(aws_opts)
  rescue => e
    $stderr.puts("[ERROR] #{e.message}")
    exit 1
  end
end

String.colorize = options[:color]

if options[:debug]
  AWS.config({
    :http_wire_trace => true,
    :logger => Kelbim::Logger.instance,
  })
end

begin
  logger = Kelbim::Logger.instance
  logger.set_debug(options[:debug])
  client = Kelbim::Client.new(options)

  case mode
  when :export
    if split
      logger.info('Export ELB')

      output_file = DEFAULT_FILENAME if output_file == '-'
      requires = []

      client.export(options) do |exported, converter|
        exported.each do |vpc, elbs|
          if split == :more
            elb_dir = File.join(File.dirname(output_file), "#{vpc || :classic}")
            FileUtils.mkdir_p(elb_dir)

            elbs.each do |name, attrs|
              elb_file = File.join(elb_dir, "#{name}.elb")
              requires << elb_file

              logger.info("  write `#{elb_file}`")

              open(elb_file, 'wb') do |f|
                f.puts converter.call(vpc => {name => attrs})
              end
            end
          else
            elb_file = File.join(File.dirname(output_file), "#{vpc || :classic}.elb")
            requires << elb_file

            logger.info("  write `#{elb_file}`")

            open(elb_file, 'wb') do |f|
              f.puts converter.call(vpc => elbs)
            end
          end
        end
      end

      logger.info("  write `#{output_file}`")
      path_prefix = File.dirname(output_file)

      open(output_file, 'wb') do |f|
        requires.each do |elb_file|
          elb_file.sub!(%r|\A#{Regexp.escape(path_prefix)}/|, '')
          f.puts "require '#{elb_file}'"
        end
      end
    else
      if output_file == '-'
        logger.info('# Export ELB')
        puts client.export(options)
      else
        logger.info("Export ELB to `#{output_file}`")
        open(output_file, 'wb') {|f| f.puts client.export(options) }
      end
    end
  when :apply
    unless File.exist?(file)
      raise "No ELBfile found (looking for: #{file})"
    end

    msg = "Apply `#{file}` to ELB"
    msg << ' (dry-run)' if options[:dry_run]
    logger.info(msg)

    updated = client.apply(file)

    logger.info('No change'.intense_blue) unless updated
  when :test
    unless File.exist?(file)
      raise "No ELBfile found (looking for: #{file})"
    end

    RSpec.configure do |config|
      config.color = options[:color]
      config.output_stream = $stdout # formatterをセットする前に設定…
      config.formatter = Kelbim::RSpecFormatter
    end

    logger.info("Test `#{file}`")
    client.test(file)
  when :show_load_balancers
    puts JSON.pretty_generate(client.load_balancers)
  when :show_policies
    puts JSON.pretty_generate(client.policies)
  else
    raise 'must not happen'
  end
rescue => e
  if options[:debug]
    raise e
  else
    $stderr.puts("[ERROR] #{e.message}".red)
    exit 1
  end
end
