{"name":"Kelbim","tagline":"Kelbim is a tool to manage ELB. It defines the state of ELB using DSL, and updates ELB according to DSL.","body":"**Notice**\r\n\r\nIt does not yet support the following load balancer policies:\r\n\r\n* ProxyProtocolPolicyType\r\n* BackendServerAuthenticationPolicyType\r\n* PublicKeyPolicyType\r\n\r\n## Installation\r\n\r\nAdd this line to your application's Gemfile:\r\n\r\n    gem 'kelbim'\r\n\r\nAnd then execute:\r\n\r\n    $ bundle\r\n\r\nOr install it yourself as:\r\n\r\n    $ gem install kelbim\r\n\r\n## Usage\r\n\r\n```sh\r\nexport AWS_ACCESS_KEY_ID='...'\r\nexport AWS_SECRET_ACCESS_KEY='...'\r\nexport AWS_REGION='ap-northeast-1'\r\nkelbim -e -o ELBfile  # export ELB\r\nvi ELBFile\r\nkelbim -a --dry-run\r\nkelbim -a             # apply `ELBfile` to ELB\r\n```\r\n\r\n## Help\r\n\r\n```\r\nUsage: kelbim [options]\r\n    -p, --profile PROFILE_NAME\r\n        --credentials-path PATH\r\n    -k, --access-key ACCESS_KEY\r\n    -s, --secret-key SECRET_KEY\r\n    -r, --region REGION\r\n    -a, --apply\r\n    -f, --file FILE\r\n    -n, --elb-names NAMES\r\n        --dry-run\r\n        --ec2s VPC_IDS\r\n        --without-deleting-policy\r\n    -e, --export\r\n    -o, --output FILE\r\n        --split\r\n        --split-more\r\n    -t, --test\r\n        --show-load-balancers\r\n        --show-policies\r\n        --no-color\r\n        --debug\r\n```\r\n\r\n## ELBfile example\r\n\r\n```ruby\r\nrequire 'other/elbfile'\r\n\r\n# EC2 Classic\r\nec2 do\r\n  load_balancer \"my-load-balancer\" do\r\n    instances(\r\n      \"cthulhu\",\r\n      \"nyar\",\r\n    )\r\n\r\n    listeners do\r\n      listener [:http, 80] => [:http, 80]\r\n    end\r\n\r\n    health_check do\r\n      target \"HTTP:80/index.html\"\r\n      timeout 5\r\n      interval 30\r\n      healthy_threshold 10\r\n      unhealthy_threshold 2\r\n    end\r\n\r\n    attributes do\r\n      connection_settings :idle_timeout=>60\r\n      access_log :enabled => false\r\n      cross_zone_load_balancing :enabled => false\r\n      connection_draining :enabled => false, :timeout => 300\r\n    end\r\n\r\n    availability_zones(\r\n      \"ap-northeast-1a\",\r\n      \"ap-northeast-1b\"\r\n    )\r\n  end\r\nend\r\n\r\n# EC2 VPC\r\nec2 \"vpc-XXXXXXXXX\" do\r\n  load_balancer \"my-load-balancer\", :internal => true do\r\n    instances(\r\n      \"nyar\",\r\n      \"yog\"\r\n    )\r\n\r\n    listeners do\r\n      listener [:tcp, 80] => [:tcp, 80]\r\n      listener [:https, 443] => [:http, 80] do\r\n        app_cookie_stickiness \"CookieName\"=>\"20\"\r\n        ssl_negotiation [\"Protocol-TLSv1\", \"Protocol-SSLv3\", \"AES256-SHA\", ...]\r\n        server_certificate \"my-cert\"\r\n      end\r\n    end\r\n\r\n    health_check do\r\n      target \"TCP:80\"\r\n      timeout 5\r\n      interval 30\r\n      healthy_threshold 10\r\n      unhealthy_threshold 2\r\n    end\r\n\r\n    attributes do\r\n      access_log :enabled => true, :s3_bucket_name => \"any_bucket\", :s3_bucket_prefix => nil, :emit_interval => 60\r\n      cross_zone_load_balancing :enabled => true\r\n      connection_draining :enabled => false, :timeout => 300\r\n    end\r\n\r\n    subnets(\r\n      \"subnet-XXXXXXXX\"\r\n    )\r\n\r\n    security_groups(\r\n      \"default\"\r\n    )\r\n  end\r\nend\r\n```\r\n\r\n## Test\r\n\r\n```ruby\r\nec2 \"vpc-XXXXXXXXX\" do\r\n  load_balancer \"my-load-balancer\" do\r\n    spec do\r\n      url = URI.parse('http://www.example.com/')\r\n      res = Net::HTTP.start(url.host, url.port) {|http| http.get(url.path) }\r\n      expect(res).to be_a(Net::HTTPOK)\r\n    end\r\n    ...\r\n```\r\n\r\n```sh\r\nshell> kelbim -t\r\nTest `ELBfile`\r\n...\r\n\r\nFinished in 3.16 seconds\r\n3 examples, 0 failures\r\n```\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}